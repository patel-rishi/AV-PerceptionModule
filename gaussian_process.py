# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eS9HlsLVKWLx01LzblQHRyjgKCGn9ZzT
"""

import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error

x = 3
if x==1: data = np.genfromtxt("/content/drive/MyDrive/Colab Notebooks/passenger_car.csv", delimiter=",")
elif x==2: data = np.genfromtxt("/content/drive/MyDrive/Colab Notebooks/motorcycle.csv", delimiter=",")
elif x==3: data = np.genfromtxt("/content/drive/MyDrive/Colab Notebooks/truck.csv", delimiter=",")
# Columns has headings: [YOLO distance, Carla distance, Predicted vehicle, Expected output, Testing]

data = data[1:] # Removing the headers
sorted_data = sorted(data, key=lambda a_entry: a_entry[0]) 
sorted_data = np.array(sorted_data)

import torch, math
import gpytorch
import tensorflow as tf

x_train = torch.tensor(sorted_data[:,0])[::3]
y_train = torch.tensor(sorted_data[:,3])[::3]

# We will use the simplest form of GP model, exact inference
class ExactGPModel(gpytorch.models.ExactGP):
    def __init__(self, train_x, train_y, likelihood):
        super(ExactGPModel, self).__init__(train_x, train_y, likelihood)
        self.mean_module = gpytorch.means.ConstantMean()
        self.covar_module = gpytorch.kernels.ScaleKernel(gpytorch.kernels.RBFKernel())
    
    def forward(self, x):
        mean_x = self.mean_module(x)
        covar_x = self.covar_module(x)
        return gpytorch.distributions.MultivariateNormal(mean_x, covar_x)

# initialize likelihood and model
likelihood = gpytorch.likelihoods.GaussianLikelihood()
model = ExactGPModel(x_train, y_train, likelihood)

import os
smoke_test = ('CI' in os.environ)
training_iter = 2 if smoke_test else 50

model.train()
likelihood.train()

# Use the adam optimizer
optimizer = torch.optim.Adam(model.parameters(), lr=0.1)  # Includes GaussianLikelihood parameters

# "Loss" for GPs - the marginal log likelihood
mll = gpytorch.mlls.ExactMarginalLogLikelihood(likelihood, model)

for i in range(training_iter):
    # Zero gradients from previous iteration
    optimizer.zero_grad()
    # Output from model
    output = model(x_train)
    # Calc loss and backprop gradients
    loss = -mll(output, y_train)
    loss.backward()
    print('Iter %d/%d - Loss: %.3f   lengthscale: %.3f   noise: %.3f' % (
        i + 1, training_iter, loss.item(),
        model.covar_module.base_kernel.lengthscale.item(),
        model.likelihood.noise.item()
    ))
    optimizer.step()

model.eval()
likelihood.eval()

x_test = torch.tensor(sorted_data[:,0])[::2]
x_test = x_test[::4]
y_test = torch.tensor(sorted_data[:,3])[::2]
y_test = y_test[::4]

# Make predictions by feeding model through likelihood
with torch.no_grad(), gpytorch.settings.fast_pred_var():
    observed_pred = likelihood(model((x_test)))

import matplotlib.pyplot as plt

with torch.no_grad():
    # Initialize plot
    f, ax = plt.subplots(1, 1, figsize=(7, 7))

    # Get upper and lower confidence bounds
    lower, upper = observed_pred.confidence_region()
    # Plot training data as black stars
    ax.plot(x_train.numpy(), y_train.numpy(), 'bo')
    # Plot predictive means as blue line
    ax.plot(x_test.numpy(), observed_pred.mean.numpy(), 'r')
    # Shade between the lower and upper confidence bounds
    ax.fill_between(x_test.numpy(), lower.numpy(), upper.numpy(), alpha=0.5)
    ax.set_ylim([0, 17])
    ax.legend(['Observed Data', 'Mean', 'Confidence'])
    plt.xlabel("Estimated distance")
    plt.ylabel("Carla ground truth distance")
    if x==1: plt.title("For PassengerCar")
    elif x==2: plt.title("For Motorcycle/bicycle")
    elif x==3: plt.title("For Truck")

temp_pred = np.array(observed_pred[:].loc)
new_y_test = np.array(y_test)[:100]

print("MSE is {}".format(mean_squared_error(new_y_test, temp_pred[:100])))
print("Variance is: {}".format(np.var(temp_pred[:100]-new_y_test)))

